unit frm_reportes;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, db, FileUtil, LR_Class, LR_DBSet, LR_E_CSV,
  lr_e_pdf, Forms, Controls, Graphics, Dialogs, ExtCtrls, DbCtrls, Buttons,
  IbConnection;

type

  { Tfrmreportes }

  Tfrmreportes = class(TForm)
    BitBtn1: TBitBtn;
    DataSource1: TDataSource;
    DBLookupListBox1: TDBLookupListBox;
    frCSVExport1: TfrCSVExport;
    frDBDataSet1: TfrDBDataSet;
    frDBDataSet2: TfrDBDataSet;
    frReport1: TfrReport;
    frTNPDFExport1: TfrTNPDFExport;
    RadioGroup1: TRadioGroup;
    SQLQuery1: TSQLQuery;
    SQLReport2: TSQLQuery;
    SQLReport: TSQLQuery;
    SQLTransaction1: TSQLTransaction;
    procedure BitBtn1Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure RadioGroup1SelectionChanged(Sender: TObject);
  private
    { private declarations }
    NumInve : string;
    procedure set_query(const opc : integer);
  public
    { public declarations }
  end;

const
  SqlFunc = 'select marca.descripcion marca, elemento.descripcion elemento, elemento.serie, elemento.inventario, ' +
            'funcionario.apellidos || '' '' || funcionario.nombres funcionario from elemento ' +
            'left join funcionario on (elemento.id_funcionario = funcionario.id) ' +
            'left join marca on (elemento.id_marca = marca.id) ' +
            'where funcionario.id = %d order by elemento.descripcion';

  SqlDep = 'select dependencia.descripcion dependencia, marca.descripcion marca, elemento.descripcion elemento, ' +
           'elemento.serie, elemento.inventario, funcionario.apellidos || '' '' || funcionario.nombres funcionario ' +
           'from elemento left join funcionario on (elemento.id_funcionario = funcionario.id) ' +
           'left join marca on (elemento.id_marca = marca.id) ' +
           'left join dependencia on (funcionario.id_dependencia = dependencia.id) ' +
           'where dependencia.id = %d order by elemento.descripcion';

  SqlFic1 = 'Select elemento.id, categoria.descripcion categoria, elemento.descripcion elemento, marca.descripcion marca, elemento.modelo, elemento.serie, ' +
            'proveedor.descripcion proveedor, elemento.fecha_compra, elemento.numero_factura, elemento.inventario, elemento.caracteristicas, elemento.valor_compra, ' +
            'funcionario.apellidos || '' '' || funcionario.nombres funcionario, estado.descripcion estado ' +
            'From ELEMENTO left join funcionario on (elemento.id_funcionario = funcionario.id) ' +
            'left outer  join marca on (elemento.id_marca = marca.id) left join estado on (elemento.id_estado = estado.id) ' +
            'left join categoria on (elemento.id_categoria = categoria.id) left outer join proveedor on (elemento.id_proveedor = proveedor.id) ' +
            'Where Elemento.inventario = %s';

  SqlFic2 = 'Select fecha, observacion from MOVIMIENTO where id_elemento = %d order by fecha desc';

var
  frmreportes: Tfrmreportes;

  procedure reportes(const base : TIBConnection);

implementation

{$R *.lfm}

{ Tfrmreportes }

procedure reportes(const base : TIBConnection);
begin
 Application.CreateForm(TFrmreportes, frmreportes);
 FrmReportes.SQLTransaction1.DataBase := base;
 frmreportes.SQLQuery1.DataBase:= base;
 frmreportes.SQLQuery2.DataBase:= base;
 frmreportes.SQLReport.DataBase:= base;
 frmReportes.set_query(0);
 FrmReportes.ShowModal;
end;

procedure Tfrmreportes.RadioGroup1SelectionChanged(Sender: TObject);
begin
 set_query(RadioGroup1.ItemIndex);
end;

procedure Tfrmreportes.FormDestroy(Sender: TObject);
begin
  frmreportes := nil;
end;

procedure Tfrmreportes.BitBtn1Click(Sender: TObject);
var
 rpt : string;
begin
 SQLReport.Close;
 Screen.Cursor := crSQLWait;
 case RadioGroup1.ItemIndex of
   0: begin
       SQLReport.SQL.Text := Format(sqlFunc, [SQLQuery1.Fieldbyname('id').asInteger]);
       rpt := 'reportes/rptfuncionario.lrf';
      end;
   1 : begin
        SQLReport.SQL.Text := Format(sqlDep, [SQLQuery1.Fieldbyname('id').asInteger]);
        rpt := 'reportes/rptdependencia.lrf';
       end;
   2 : begin
        if (NumInve = EmptyStr) then begin
           Screen.Cursor := crDefault;
           MessageDlg('Especifique un número de inventario', mtWarning, [mbOk], 0);
           Exit;
          end;
        SQLReport.SQL.Text := Format(sqlFic1, [NumInve]);
        rpt := 'reportes/rptficha.lrf';
       end;
  end;
 SqlReport.Open;
 if RadioGroup1.ItemIndex = 2 then begin
   SQLReport2.Sql.Text := Format(SqlFic2, [Sqlreport.FieldByName('Id').AsInteger]);
   SqlReport2.Open;
  end;
 frReport1.LoadFromFile(rpt);
 Screen.Cursor := crDefault;
 frReport1.ShowReport;
end;

procedure Tfrmreportes.set_query(const opc: integer);

begin
 SQLQuery1.Close;
 case opc of
   0 : begin
        SqlQuery1.Sql.Text := 'Select id, apellidos || '' '' || nombres descripcion from funcionario order by 2';
        SqlQuery1.Open;
       end;
   1 : begin
        SqlQuery1.Sql.Text := 'Select id, descripcion from dependencia order by 2';
        SQLQuery1.Open;
       end;
   2 : begin
        NumInve := EmptyStr;
        NumInve := InputBox('Ficha de producto', 'Número de inventario', '');
        if trim(NumInve) = Emptystr then
         MessageDlg('Número de inventario incompleto', mtWarning, [mbOk], 0);
       end;
  end;
end;

end.

